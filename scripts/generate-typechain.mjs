#!/usr/bin/env node

import { mkdir, readFile, rm, writeFile } from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, "..");
const artifactsDir = path.join(rootDir, "artifacts/contracts/Swap2p.sol");
const artifactPath = path.join(artifactsDir, "Swap2p.json");
const outDir = path.join(rootDir, "typechain-types");

const header = `// Auto-generated by scripts/generate-typechain.mjs. Do not edit manually.\nimport type { Abi } from "viem";\n\n`;

async function main() {
  const raw = await readFile(artifactPath, "utf8");
  const artifact = JSON.parse(raw);

  if (!Array.isArray(artifact.abi)) {
    throw new Error("Swap2p artifact does not contain an ABI array.");
  }

  await rm(outDir, { recursive: true, force: true });
  await mkdir(outDir, { recursive: true });

  const abiString = JSON.stringify(artifact.abi, null, 2);
  const bytecode =
    typeof artifact.bytecode === "string" ? artifact.bytecode : undefined;

  let swap2pFile = header;
  swap2pFile += `export const swap2pAbi = ${abiString} as const;\n`;
  swap2pFile += "export type Swap2pAbi = typeof swap2pAbi;\n";
  swap2pFile += "export type Swap2pAbiItem = Swap2pAbi[number];\n";
  swap2pFile += "export type Swap2pSelector = Swap2pAbiItem extends { name: infer N } ? N : never;\n";
  swap2pFile += "export const swap2pContractConfig = {\n";
  swap2pFile += "  abi: swap2pAbi,\n";
  if (bytecode) {
    swap2pFile += `  bytecode: ${JSON.stringify(bytecode)} as const,\n`;
  }
  swap2pFile += "} as const;\n";

  await writeFile(path.join(outDir, "swap2p.ts"), swap2pFile, "utf8");
  await writeFile(
    path.join(outDir, "index.ts"),
    '// Auto-generated by scripts/generate-typechain.mjs. Do not edit manually.\nexport * from "./swap2p";\n',
    "utf8",
  );

  console.log(`Generated viem-friendly ABI at ${path.relative(rootDir, outDir)}`);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
